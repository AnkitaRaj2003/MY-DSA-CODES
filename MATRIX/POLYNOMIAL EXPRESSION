//POLYNOMIAL EXPRESSION CODE

#include <iostream>
#include <cmath>
using namespace std;

class term
{
public:
	int coeff, exp;
};
class polynomial
{
	int n;
	term *t;

public:
	polynomial(int n)
	{
		this->n = n;
		t = new term[this->n];
	}
	int evaluate(int x);
	~polynomial() { delete[] t; }
	polynomial operator+(polynomial &p);
	friend ostream &operator<<(ostream &os, polynomial &p);
	friend istream &operator>>(istream &is, polynomial &p);
};
int polynomial::evaluate(int x){
	int sum=0;
	for(int i=0;i<n;i++) sum+=t[i].coeff*pow(x,t[i].exp);
	return sum;
}
ostream &operator<<(ostream &os, polynomial &p)
{
	cout << "Polynomial is: ";
	int c = 0;
	for (int i = 0; i < p.n; i++)
	{
		if (c == 0)
		{
			cout << p.t[i].coeff << "x^" << p.t[i].exp;
			c++;
		}
		else if (p.t[i].coeff > 0)
		{
			cout << "+" << p.t[i].coeff << "x^" << p.t[i].exp;
			c++;
		}
		else
		{
			cout << "-" << p.t[i].coeff << "x^" << p.t[i].exp;
			c++;
		}
	}
	return os;
}

istream &operator>>(istream &is, polynomial &p)
{
	cout << "Enter non zero elements: " << endl;
	for (int i = 0; i < p.n; i++)
		cin >> p.t[i].coeff >> p.t[i].exp;
	return is;
}
polynomial polynomial::operator+(polynomial &p)
{
	polynomial p1(n + p.n);
	int i = 0, j = 0, k = 0;
	while (i < n && j < p.n)
	{
		if (t[i].exp < p.t[j].exp)
			p1.t[k++] = p.t[j++];
		else if (t[i].exp > p.t[j].exp)
			p1.t[k++] = t[i++];
		else
		{
			p1.t[k] = t[i];
			p1.t[k++].coeff = t[i++].coeff + p.t[j++].coeff;
		}
	}
	for(;i<n;i++) p1.t[k++] = t[i++];
	for(;j<p.n;j++) p1.t[k++] = p.t[j++];
	p1.n = k;
	return p1;
}
int main()
{
	polynomial p1(5);
	cin>>p1;
	polynomial p2(5);
	cin>>p2;
	polynomial p3 = p1+p2;
	cout<<"First polynomial is: "<<p1<<endl;
	cout<<"Second polynomial is: "<<p2<<endl;
	cout<<"Final polynomial is: "<<p3<<endl;

	return 0;
}
