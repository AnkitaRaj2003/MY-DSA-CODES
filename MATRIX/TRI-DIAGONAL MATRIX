//Tridiagonal matrix code

//ROW MAJOR FORM
#include <iostream>
using namespace std;
class triDiagonal_matrix
{
    int n, *A;

public:
    triDiagonal_matrix()
    {
        this->n = 10;
        A = new int[3 * n - 2];
    }
    triDiagonal_matrix(int n)
    {
        this->n = n;
        A = new int[n * 3 - 2];
    }
    void set(int i, int j, int x)
    {
        if (i == 1)
            A[j] = x;
        else
        {
            if (i - j == 1)
                A[2 + (n - 2) * i] = x;
            else if (i - j == 0)
                A[3 + (n - 2) * i] = x;
            else if (i - j == -1)
                A[4 + (n - 2) * i] = x;
        }
    }
    int get(int i, int j)
    {
        if (i == j)
            return A[j];
        else
        {
            if (i - j == 1)
                return A[2 + (n - 2) * i];
            else if (i - j == 0)
                return A[3 + (n - 2) * i];
            else if (i - j == -1)
                return A[4 + (n - 2) * i];
        }
        return 0;
    }
    void display()
    {
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= n; j++)
            {
                if (i - j > 1 || i - j < -1)
                    cout << 0 << " ";
                else
                {
                    if (i == j)
                        cout<< A[j] <<" ";
                    else
                    {
                        if (i - j == 1)
                            cout<< A[2 + (n - 2) * i] << " ";
                        else if (i - j == 0)
                            cout<< A[3 + (n - 2) * i] << " ";
                        else if (i - j == -1)
                            cout<< A[4 + (n - 2) * i] << " ";
                    }
                }
            }
            cout << endl;
        }
    }
    ~triDiagonal_matrix()
    {
        delete[] A;
    }
};

int main()
{
    int d;
    cout << "Enter Dimensions: ";
    cin >> d;

    triDiagonal_matrix dm(d);

    int x;
    cout << "Enter All Elements: " << endl;
    ;
    for (int i = 1; i <= d; i++)
    {
        for (int j = 1; j <= d; j++)
        {
            cout << "Element at index [" << i << "," << j << "]: ";
            cin >> x;
            dm.set(i, j, x);
        }
    }

    dm.display();
    return 0;
}


//FIRST STORE LOWER DIAGONAL -> MAIN DIAGONAL -> UPPER DIAGONAL
//if i-j = 1, index = j-1
//i-j = 0, index = n-1-i-1
//i-j = -1, index = 2*n-1+i-1
