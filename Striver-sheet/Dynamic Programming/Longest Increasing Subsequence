//GFG: https://www.geeksforgeeks.org/problems/longest-increasing-subsequence-1587115620/1

----------------------------BRUTE FORCE-------------------------------
    int f(int n,int last,int a[]){
        if(n<0) return 0;
        int take=0,ntake=0;
        if(last==-1 || a[n]<a[last]) take = 1+f(n-1,n,a);
        ntake = f(n-1,last,a);
        return max(take,ntake);
    }
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       // your code here
       return f(n-1,-1,a);
    }

------------------------MEMOIZATION------------------------
    int f(int n,int last,int a[],vector<vector<int>>dp){
        if(n<0) return 0;
        if(dp[n][last+1]!=-1) return dp[n][last];
        int take=0,ntake=0;
        if(last==-1 || a[n]<a[last]) take = 1+f(n-1,n,a,dp);
        ntake = f(n-1,last,a,dp);
        return dp[n][last+1]=max(take,ntake);
    }
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
       // your code here
       vector<vector<int>>dp(n,vector<int>(n+1,-1));
       return f(n-1,-1,a,dp);
    }

---------------------TABULATION-------------------------
