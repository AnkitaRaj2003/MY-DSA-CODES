//Coding Ninjas: https://www.codingninjas.com/studio/problems/minimum-path-sum_985349?source=youtube&campaign=striver_dp_videos&leftPanelTabValue=SUBMISSION

TC: O(2^(M*N))        SC: O(M+N)
int f(int i,int j,int n,int m,vector<vector<int>> grid){
    if(i>=n || j>=m) return INT_MAX;
    if(i==n-1 && j==m-1) return grid[i][j];
    int d = f(i+1,j,n,m,grid);
    int r = f(i,j+1,n,m,grid);
    return grid[i][j]+min(r,d);
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int m=grid[0].size(),n=grid.size();
    return f(0,0,n,m,grid);
}

----------------------------MEMOIZATION---------------------------------------
TC: O(M*N)        SC: O(M*N)
int f(int i,int j,int n,int m,vector<vector<int>> grid,vector<vector<int>>&dp){
    if(i>=n || j>=m) return INT_MAX;
    if(i==n-1 && j==m-1) return grid[i][j];
    if(dp[i][j]!=-1) return dp[i][j];
    int d = f(i+1,j,n,m,grid,dp);
    int r = f(i,j+1,n,m,grid,dp);
    return dp[i][j]=grid[i][j]+min(r,d);
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int m=grid[0].size(),n=grid.size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return f(0,0,n,m,grid,dp);
}

                OR
int f(int n,int m,vector<vector<int>> grid,vector<vector<int>>&dp){
    if(n<0 || m<0) return INT_MAX;
    if(n==0 && m==0) return grid[n][m];
    if(dp[n][m]!=-1) return dp[n][m];
    int d = f(n-1,m,grid,dp);
    int r = f(n,m-1,grid,dp);
    return dp[n][m]=grid[n][m]+min(r,d);
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int m=grid[0].size(),n=grid.size();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return f(n-1,m-1,grid,dp);
}

---------------------------TABULATION--------------------------------
TC: O(M*N)                SC: O(M*N)

int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int m=grid[0].size(),n=grid.size();
    vector<vector<int>>dp(n,vector<int>(m,0));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(i==0 && j==0) dp[i][j] = grid[i][j];
            else{
                dp[i][j] = grid[i][j]+min(i==0?INT_MAX:dp[i-1][j],j==0?INT_MAX:dp[i][j-1]);
            }
        }
    }
    return dp[n-1][m-1];
}


------------------------------------SPACE OPTIMIZED-------------------------------------------
TC: O(M*N)            SC: O(M)
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int m=grid[0].size(),n=grid.size();
    vector<int>dp(m,INT_MAX);
    for(int i=0;i<n;i++){
        int prev = INT_MAX;
        for(int j=0;j<m;j++){
            if(i==0 && j==0) prev=0;
            grid[i][j] += min(prev, dp[j]);
            dp[j] = prev = grid[i][j];
        }
    }
    return grid[n-1][m-1];
}
