//GFG: Max Sum Without Adjacent
//https://www.geeksforgeeks.org/problems/max-sum-without-adjacents2430/1

-----------BRUTE FORCE------------
TC: O(2^N) approx   SC: O(N)
	int f(int i,int* arr,int n){
	    if(i>=n) return 0;
	    int l = f(i+1,arr,n);
	    int r = arr[i]+f(i+2,arr,n);
	    return max(l,r);
	}
	int findMaxSum(int *arr, int n) {
	    // code here
	    return f(0,arr,n);
	}
              OR
	// calculate the maximum sum with out adjacent
	int f(int* arr,int n,vector<int>&dp){
	    if(n<0) return 0;
	    if(dp[n]!=-1) return dp[n];
	    int l = f(arr,n-1,dp);
	    int r = arr[n]+f(arr,n-2,dp);
	    return dp[n]=max(l,r);
	}
	int findMaxSum(int *arr, int n) {
	    // code here
	    vector<int>dp(n,-1);
	    return f(arr,n-1,dp);
	}
--------------MEMOIZATION------------
	// calculate the maximum sum with out adjacent
	int f(int i,int* arr,int n,vector<int>&dp){
	    if(i>=n) return 0;
	    if(dp[i]!=-1) return dp[i];
	    int l = f(i+1,arr,n,dp);
	    int r = arr[i]+f(i+2,arr,n,dp);
	    return dp[i]=max(l,r);
	}
	int findMaxSum(int *arr, int n) {
	    // code here
	    vector<int>dp(n,-1);
	    return f(0,arr,n,dp);
	}

--------------TABULATION------------------
	int findMaxSum(int *arr, int n) {
	    // code here
	    vector<int>dp(n+1,-1);
	    dp[0] = 0;
	    for(int i=0;i<n;i++){
	        int take=arr[i];
	        if(i>0) take+=dp[i-1];
	        int not_take = dp[i];
	        dp[i+1] = max(take,not_take);
	    }
	    return dp[n];
	}

------------SPACE OPTIMIZED-------------
	int findMaxSum(int *arr, int n) {
	    // code here
	    int prev_i=0,prev=0;
	    for(int i=0;i<n;i++){
	        int take=arr[i]+prev_i;
	        int not_take = prev;
	        
	        prev_i = prev;
	        prev = max(take,not_take);
	    }
	    return prev;
	}
