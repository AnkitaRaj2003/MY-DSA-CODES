//GFG: LRU Cache
//https://practice.geeksforgeeks.org/problems/lru-cache/1

class LRUCache
{
    private:
    unordered_map<int,int>m;
    unordered_map<int,list<int>::iterator>address;
    list<int>l;
    int cap;

    public:
    //Constructor for initializing the cache capacity with the given value.
    LRUCache(int cap)
    {
        // code here
        this->cap = cap;
    }
    
    //Function to return value corresponding to the key.
    int GET(int key)
    {
        // your code here
        if(m.find(key)==m.end()) return -1;
        list<int>::iterator it = address[key];
        l.erase(it);
        l.push_front(key);
        address[key] = l.begin();
        return m[key];
    }
    
    //Function for storing key-value pair.
    void SET(int key, int value)
    {
        // your code here
        if(m.find(key)==m.end() && m.size()==cap){
            int i = l.back();
            m.erase(i);
            address.erase(i);
            l.pop_back();
        }
        if(m.find(key)!=m.end()){
            list<int>::iterator it = address[key];
            l.erase(it);
        }
        l.push_front(key);
        address[key] = l.begin();
        m[key] = value;
    }
};
