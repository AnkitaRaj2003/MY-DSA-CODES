//Find element by row and column number in pascals triangle
***FORMULA: row-1
                  C
                    column-1

int ele(int n,int r){
  long long int ans=1;
  for(int i=1;i<=r;i++)
    ans*=(n--)/i;
  return ans;
}

int main(){
  int r=5,c=3;
  cout<<ele(r-1,c-1);
}
TIME COMPLEXITY: O(C)
SPACE COMPLEXITY: O(1)

*************************
//Find all elements of a row 
int cal(int r){
    int ans=1;
    for(int i=0;i<r-1;i++){
        ans=ans*(r-i)/(i+1);
        cout<<ans<<" ";
    }
}
int main() {
    // Write C++ code here
    int n=6; //row number
    cout<<1<<" ";
    cal(n-1);
    cout<<1<<" ";
    return 0;
}
TIME COMPLEXITY: O(N)
SPACE COMPLEXITY: O(1)

OR

long long int mod = pow(10,9);
    vector<ll> nthRowOfPascalTriangle(int n) {
        // code here
        if(n==1) return {1};
        vector<ll> v = nthRowOfPascalTriangle(n-1),ans;
        ans.push_back(1);
        for(int i=1;i<n-1;i++) ans.push_back((v[i-1]+v[i])%mod);
        ans.push_back(1);
        return ans;
    }

OR

    vector<ll> nthRowOfPascalTriangle(int n) {
        // code here
        long long int mod = 1e9+7;
        vector<long long>ans;
        ans.push_back(1);
        long long num=1;
        for(int i=1;i<n-1;i++){
            num = (num * (n - i)) / i;
            num = num%mod;
            ans.push_back(num);
        }
        if(n>1) ans.push_back(1);
        return ans;
    }

//Create a pascal triangle of given rows

long long int mod = pow(10,9);
    vector<int> getRow(int n) {
        if(n==1) return {1};
        vector<int> v = getRow(n-1);
        vector<int> ans;
        ans.push_back(1);
        for(int i=1;i<n-1;i++) ans.push_back((v[i-1]+v[i])%mod);
        ans.push_back(1);
        return ans;
    }
};

*****BETTER
    vector<vector<int>> generate(int n) {
        vector<vector<int>> r(n);
        for(int i=0;i<n;i++){
            r[i].resize(i+1);
            r[i][0] = r[i][i] = 1;
            for(int j=1;j<i;j++) r[i][j] = r[i-1][j-1]+r[i-1][j];
        }
        return r;
    }
