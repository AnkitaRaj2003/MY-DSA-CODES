//Leetcode: Remove nth node from the end of linkedlist 
//https://leetcode.com/problems/remove-nth-node-from-end-of-list/submissions/982917407/

**ASK THE INTERVIEW IF WE HAVE TO FREE UP THE SPACE BY DELETING THE DELETED NODE

  For traversal   For reaching node
TC: O(N)       +      O(N)
ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* temp = head;
        int count=0;
        while(temp){
            temp = temp->next;
            count++;
        }
        if(n>count) return head;
        else if(n==count){
            temp = head;
            head = head->next;
            delete temp;
            return head;
        }
        temp = head;
        for(int i=1;i<count-n;i++) temp=temp->next;
        temp->next = temp->next->next;
        ListNode* b = temp->next;
        delete b;
        b = NULL;
        return head;
    }

-------------OR-------------
TC: O(N)
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* f = head;
        ListNode* s = head;
        int i;
        for(i=0;i<n && f;i++) f = f->next;
        if(!f){
            if(i==n){
                head = head->next;
                delete s;
                s = NULL;
                return head;
            }
            return head;
        }
        while(f->next){
            s = s->next;
            f = f->next;
        }
        f = s->next;
        s->next = f->next;
        delete f;
        return head;
    }

** IF WE DO NOT FREE UP THE SPACE OF DELETED NODE
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *fast = head, *slow = head;
        for (int i = 0; i < n; i++) fast = fast->next;
        if (!fast) return head->next;
        while (fast->next) fast = fast->next, slow = slow->next;
        slow->next = slow->next->next;
        return head;
    }
