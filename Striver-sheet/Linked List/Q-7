//GFG: Intersection point in Y shaped Linkedlist
//https://practice.geeksforgeeks.org/problems/intersection-point-in-y-shapped-linked-lists/1

****BRUTE FORCE: Start from a linked list and stand on a node then traverse the second array fully and check if we get equal node if no then move to another node in first linked list
TC: O(M*N)

****BETTER APPROACH: Traverse a linked list and hash the node addresses then traverse another linked list and check if we get any node whose address is present in the hash table
TC: O(M+N)    SC: O(N)

***BETTER APPROACHES:
(1)
int intersectPoint(Node* head1, Node* head2)
{
    // Your Code Here
    Node* t1 = head1,*t2 = head2;
    int c1=0,c2=0;
    while(t1 || t2){
        if(t1){
            c1++;
            t1 = t1->next;
        }
        if(t2){
            c2++;
            t2 = t2->next;
        }
    }
    if(c2>c1){
        t1 = head2;
        t2 = head1;
        c1 = c2-c1;
    }
    else{
        t1 = head1;
        t2 = head2;
        c1 = c1-c2;
    }
    for(int i=0;i<c1;i++) t1 = t1->next;
    while(t1 && t2){
        if(t1 == t2) return t1->data;
        t1 = t1->next;
        t2 = t2->next;
    }
    return -1;
}
(2)
int intersectPoint(Node* head1, Node* head2)
{
    // Your Code Here
    int flag=0;
    Node* t1 = head1,*t2 = head2;
    while(flag<3){
        if(t1==t2) return t1->data;
        t1 = t1->next;
        t2 = t2->next;
        if(!t1){
            t1 = head2;
            flag++;
        }
        else if(!t2){
            t2 = head1;
            flag++;
        }
    }
    return -1;
}
