//Leetcode: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

------------------BEST-----------------
TC: O(N)              SC: O(1)
    int maxProfit(vector<int>& a) {
        int min = a[0],n = a.size(),maxi=0;
        for(int i=1;i<n;i++){
            if(a[i]<min) min = a[i];
            else maxi = max(maxi,a[i]-min);
        }
        return maxi;
    }

-----------------RECURSION---------------
    int f(int n,int l,vector<int>a){
        if(n<0) return 0;
        int take = 0;
        if(l==-1) take = f(n-1,n,a);
        else if(a[n]<a[l]) take = a[l]-a[n];
        int not_take = f(n-1,l,a);
        return max(take,not_take);
    }
    int maxProfit(vector<int>& a) {
        return f(a.size()-1,-1,a);
    }

----------------------DP---------------------
    int f(int n,int l,vector<int>a,vector<int>dp){
        if(n<0) return 0;
        if(dp[n]!=-1) return dp[n];
        int take = 0;
        if(l==-1) take = f(n-1,n,a,dp);
        else if(a[n]<a[l]) take = a[l]-a[n];
        int not_take = f(n-1,l,a,dp);
        return dp[n]=max(take,not_take);
    }
    int maxProfit(vector<int>& a) {
        vector<int>dp(a.size(),-1);
        return f(a.size()-1,-1,a,dp);
    }
