//Leetcode: 
TC: O(N)    SC:O(1)

---------------USING RECURSION--------------
TC: O(2^N)    SC:O(N)
    int f(int n){
        if(n<=1) return n;
        return f(n-1)+f(n-2);
    }
    int fib(int n) {
        return f(n);
    }

------------------MEMOIZATION(TOP DOWN)-------------------
TC: O(N)      SC: O(N)+O(N)
    int f(int n,vector<int>&dp){
        if(dp[n]!=-1) return dp[n];
        return dp[n]=f(n-1,dp)+f(n-2,dp);
    }
    int fib(int n) {
        vector<int>dp(n+2,-1);
        dp[0]=0;
        dp[1]=1;
        return f(n,dp);
    }


------------------TABULATION--------------------
TC: O(N)    SC: O(N)
    int fib(int n) {
        vector<int>dp(n+2,-1);
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            dp[i] = dp[i-1]+dp[i-2];
        }
        return dp[n];
    }


----------------SPACE OPTINIZED-------------------
TC: O(N)    SC: O(1)
    int fib(int n) {
        if(n<=1) return n;
        int num1=0,num2=1,num3=0;
        for(int i=2;i<=n;i++){
            num3=num1+num2;
            num1=num2;
            num2=num3;
        }
        return num3;
    }
