//Leetcode: https://leetcode.com/problems/word-search/submissions/1152717768/

TC: m*n*4k   //loop is running for m*n times and in each iteration search is called, search will take atmax O(4K) bcz each search calls itself 4 times and it will go till index==k
SC: O(k)    //where k is the size of word

    bool checkWordPresent(vector<vector<char>>& board, string word, int n, int m, int row, int col, int index){
        if(index == word.size()){
            return true;
        }
        if(row < 0 || col < 0 || row >= n || col >= m || board[row][col] != word[index]){
            return false;
        }
        char temp = board[row][col];
        board[row][col] = '*';
        bool ans1 = checkWordPresent(board, word, n, m, row+1, col, index+1);
        bool ans2 = checkWordPresent(board, word, n, m, row, col+1, index+1);
        bool ans3 = checkWordPresent(board, word, n, m, row-1, col, index+1);
        bool ans4 = checkWordPresent(board, word, n, m, row, col-1, index+1);
        board[row][col] = temp;
        return ans1 || ans2 || ans3 || ans4;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(checkWordPresent(board, word, n, m, i, j, 0)){
                    return true;
                }
            }
        }
        return false;
    }
