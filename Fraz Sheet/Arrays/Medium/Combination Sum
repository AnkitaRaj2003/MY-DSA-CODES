//Leetcode: https://leetcode.com/problems/combination-sum/

TC: O(2^T x K) [K be the avg length of combination [TC of insertion in ans] and 2^T is the pick/not pick numbers and since one number can be picked unlimited number of times we can tell the exact count]           
SC: O(K x X)
** If one number can be picked only times then the TC will be 2^N * K where N is the total elements and k the size of average combination.

    void f(int n,int sum,vector<vector<int>>&ans,vector<int>v,vector<int>c){
        if(sum==0){
            ans.push_back(v);
            return;
        }
        if(n<0) return;
        if(c[n]<=sum){
            v.push_back(c[n]);
            f(n,sum-c[n],ans,v,c);
            v.pop_back();
        }
        f(n-1,sum,ans,v,c);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>temp;
        //use when duplicate elements are there
        //sort(candidates.begin(),candidates.end());
        //candidates.erase(unique(candidates.begin(),candidates.end()),candidates.end());
        f(candidates.size()-1,target,ans,temp,candidates);
        return ans;
    }

-----------------------------------OR-----------------------------------------------

void f(int i,int sum,vector<vector<int>>&ans,vector<int>v,vector<int>c){
        if(sum<0) return;
        if(sum==0){
            ans.push_back(v);
            return;
        }
        for(int idx=i;idx<c.size();idx++){
            v.push_back(c[idx]);
            f(idx,sum-c[idx],ans,v,c);
            v.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>ans;
        vector<int>temp;
        f(0,target,ans,temp,candidates);
        return ans;
    }
