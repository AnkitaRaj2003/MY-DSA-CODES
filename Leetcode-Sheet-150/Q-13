//GFG: 3 Sum
//
*****BRUTE FORCE - TC: O(N) SC: O(1)
    bool find3Numbers(int a[], int n, int x)
    {
        //Your Code Here
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                for(int k=j+1;k<n;k++){
                    if(a[i]+a[j]+a[k]==x) return true;
                }
            }
        }
        return false;
    }

****BETTER APPROACH - TC: O(N2) SC: O(N)
    bool find3Numbers(int a[], int n, int x)
    {
        //Your Code Here
        unordered_map<int,int> m;
        for(int i=0;i<n;i++) m[a[i]]++;
        for(int i=0;i<n;i++){
            m[a[i]]=-1;
            for(int j=i+1;j<n;j++){
                m[a[j]] = -1;
                if(m[x-(a[i]+a[j])]>0) return true;
                m[a[j]] = 1;
            }
            m[a[i]] = 1;
        }
        return false;
    }

*****OPTIMIZED APPROACH -  TC: O(N@) SC: O(1)
    bool find3Numbers(int a[], int n, int x)
    {
        //Your Code Here
        sort(a,a+n);
        for(int i=0;i<n-2;i++){
            int j=i+1,k=n-1;
            while(j<k){
                int sum = a[i]+a[j]+a[k];
                if(sum<x) j++;
                else if(sum>x) k--;
                else return true;
            }
        }
        return false;
    }

