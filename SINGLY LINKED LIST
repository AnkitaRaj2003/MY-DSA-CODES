#include <iostream>
using namespace std;

template <class T>
class node
{
public:
    T data;
    node<T> *next;
    node(int data)
    {
        this->data = data;
        this->next = next;
    }
};
template <class T>
class SLL
{
    node<T> *front;

public:
    SLL() { this->front = NULL; }
    // Count number of nodes in the SLL
    int count();
    // Insert a node in SLL
    void insert(int data);
    // Insert node at any position in SLL
    void insert_at_position(int pos, int data);
    // Iterative Display all elements of SLL
    void display();
    // Sum of all elements in SLL
    int sum_of_elements();
    // Finding maximum element in SLL
    int max_element();
    // Linear Search
    int linear_search(int data);
    // Insert in a sorted SLL
    void insert_in_sorted_list(int data);
    // Delete node - by default last node in SLL
    int delete_node();
    // Delete node at a given position in SLL
    int delete_at_position(int pos);
    // Checking if list is sorted
    bool isSorted();
    // Remove duplicated from sorted linked list
    void remove_duplicate();
    //Reversing elements of list
    void reverse_by_elements();
    //Reverse elements by modifying links
    void reverse_by_links();
    //Destructor
    ~SLL();
};
//Reverse elements by modifying links
template<class T>
void SLL<T>::reverse_by_links(){
    if(!front){
        cout<<"List is Empty!"<<endl;
        return;
    }
    node<T>*p = NULL;
    node<T>*q = front;
    node<T>*r = front->next;
    while(q){
        q->next = p;
        p = q;
        q = r;
        if(r) r = r->next;
    }
    front = p;
}
//Reversing elements of list
template<class T>
void SLL<T>::reverse_by_elements(){
    node<T>* p = front;
    int*A = new int[count()];
    int i=0;
    for(;i<count();i++,p = p->next) A[i] = p->data;
    p = front;
    i--;
    for(;i>=0;i--,p = p->next) p->data = A[i];
} 
// Remove duplicated from sorted linked list
template <class T>
void SLL<T>::remove_duplicate()
{
    if (!front)
    {
        cout << "List is empty!!" << endl;
        return;
    }
    node<T> *p = front->next;
    node<T> *q = front;
    while (p)
    {
        if (q->data == p->data){
            q->next = p->next;
            delete p;
            p = q->next;
        }
        else{
            q = p;
            p = p->next;
        }
    }
}
// Checking if a list is sorted
template <class T>
bool SLL<T>::isSorted()
{
    node<T> *p = front;
    while (p && p->next)
    {
        if (p->data > p->next->data)
            return false;
        p = p->next;
    }
    return true;
}
// Delete node - by default last node
template <class T>
int SLL<T>::delete_node()
{
    int x;
    node<T> *p = front;
    if (!p)
        x = -1;
    else if (!p->next)
    {
        int x = front->data;
        delete front;
        front = NULL;
    }
    else
    {
        while (p->next->next)
            p = p->next;
        node<T> *t = p->next;
        x = t->data;
        delete t;
        p->next = NULL;
    }
    return x;
}
// Insert in a sorted SLL
template <class T>
void SLL<T>::insert_in_sorted_list(int data)
{
    node<T> *t = new node<T>(data);
    node<T> *p = front;
    if (!p)
        front = t;
    else if (t->data < p->data)
    {
        t->next = p;
        front = t;
    }
    else
    {
        while (p->next)
        {
            if (p->next->data > t->data)
                break;
            p = p->next;
        }
        t->next = p->next;
        p->next = t;
    }
}
// Insert a node in SLL
template <class T>
void SLL<T>::insert(int data)
{
    node<T> *p = front;
    node<T> *q = NULL;
    node<T> *t = new node<T>(data);
    if (!p)
        front = t;
    else
    {
        while (p)
        {
            q = p;
            p = p->next;
        }
        q->next = t;
    }
}
// Linear Search
template <class T>
int SLL<T>::linear_search(int data)
{
    int pos = -1;
    node<T> *p = front;
    while (p)
    {
        if (data == p->data)
            return ++pos;
        p = p->next;
    }
    return -1;
}
// Finding maximum element in SLL
template <class T>
int SLL<T>::max_element()
{
    int max = -1;
    node<T> *p = front;
    while (p)
    {
        if (p->data > max)
            max = p->data;
        p = p->next;
    }
    return max;
}
// Sum of all elements in SLL
template <class T>
int SLL<T>::sum_of_elements()
{
    node<T> *p = front;
    int sum = 0;
    while (p)
    {
        sum += p->data;
        p = p->next;
    }
    return sum;
}
// Count number of nodes in the SLL
template <class T>
int SLL<T>::count()
{
    node<T> *p = front;
    int count = 0;
    while (p)
    {
        count++;
        p = p->next;
    }
    return count;
}
// Iterative Display all elements of SLL
template <class T>
void SLL<T>::display()
{
    node<T> *p = front;
    if (!p)
        cout << "List is Empty!!" << endl;
    else
    {
        cout << "Elements are ";
        while (p)
        {
            cout << p->data << " ";
            p = p->next;
        }
        cout << endl;
    }
}
// Insert node at any position in SLL
template <class T>
void SLL<T>::insert_at_position(int pos, int data)
{
    node<T> *t = new node<T>(data);
    if (pos <= 0 || pos > count() + 1)
        cout << "Invalid Position!!\nPlease Enter valid index." << endl;
    else if (pos == 1)
    {
        t->next = front;
        front = t;
    }
    else
    {
        node<T> *p = front;
        for (int i = 1; i < pos - 1; i++)
            p = p->next;
        t->next = p->next;
        p->next = t;
    }
}
//Destructor
template<class T>
SLL<T>::~SLL(){
    node<T>*p = front;
    while(p){
        front = front->next;
        delete p;
        p = front;
    }
    cout<<"Destructor Finished"<<endl;
}

int main()
{
    SLL<int> list1;
    list1.insert(1);
    list1.insert(4);
    list1.insert(2);
    list1.insert(5);
    list1.insert(9);
    list1.insert(3);
    list1.display();
    cout<<"Started"<<endl;
    list1.reverse_by_links();
    cout<<"Ended"<<endl;
    list1.display();
    return 0;
}
