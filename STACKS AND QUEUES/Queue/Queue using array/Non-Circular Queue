//Not an effective method as it we cannot reuse space that has been used once.

#include<iostream>
using namespace std;
template<class T>
class queue{
    int size;
    int front,rear;
    T*arr;
public:
    queue(int size){
        this->size = size;
        front = rear = -1;
        arr = new T[size];
    }
    bool isFull(){return rear == size-1;}
    bool isEmpty(){return rear==front;}
    void enqueue(T x){
        if(isFull()) cout<<"List is Full!!"<<endl;
        else arr[++rear] = x; 
    }
    T dequeue(){
        T x = -1;
        if(isEmpty()) cout<<"List is Empty!!"<<endl;
        else x = arr[++front];
        return x; 
    }
    void display(){
        for(int i=front+1;i<=rear;i++) cout<<arr[i]<<" ";
        if(front!=rear) cout<<endl;
    }
};

int main(){
    queue<int> q(5);
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    q.enqueue(4);
    q.enqueue(5);
    cout<<q.dequeue()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.dequeue()<<endl;
    cout<<q.dequeue()<<endl;
    q.enqueue(6);
    q.display();
}
