//GFG: Delete middle element of a stack
//https://practice.geeksforgeeks.org/problems/delete-middle-element-of-a-stack/1?page=1&difficulty[]=-2&difficulty[]=-1&difficulty[]=0&category[]=Stack&category[]=Queue&curated[]=1&curated[]=8&curated[]=7&sortBy=submissions

//Function to delete middle element of a stack.
    void deleteMid(stack<int>&s, int sizeOfStack)
    {
        // code here.. 
        stack<int> st;
        int middle = sizeOfStack/2;
        for(int i=0;!s.empty();i++){
            if(i==middle){
                s.pop();
                break;
            }
            else{
                st.push(s.top());
                s.pop();
            }
        }
        while(!st.empty()){
            s.push(st.top());
            st.pop();
        }
    }
    
---------------OR--------------
//Function to delete middle element of a stack.
    void deleteMid_util(stack<int>&s, int sizeOfStack, int current)
    {
        //if current pointer is half of the size of stack then we 
        //are accessing the middle element of stack.
        if(current==sizeOfStack/2)
        {
            s.pop();
            return;
        }
        
        //storing the top element in a variable and popping it.
        int x = s.top();
        s.pop();
        current+=1;

        //calling the function recursively.
        deleteMid_util(s,sizeOfStack,current);
        
        //pushing the elements (except middle element) back 
        //into stack after recursion calls.
        s.push(x);
    }
    void deleteMid(stack<int>&s, int sizeOfStack)
    {
        deleteMid_util(s,sizeOfStack,0);
    }

-------------OR-------------
//Using Recursion
// Function to delete middle element of a stack.
    void del(stack<int>&s,int k){
        if(k==0){
            s.pop();
            return;
        }
        int x = s.top();
        s.pop();
        del(s,k-1);
        s.push(x);
    }
    void deleteMid(stack<int>&s, int sizeOfStack)
    {
        // code here..
        int mid = sizeOfStack/2;
        del(s,mid);
    }
