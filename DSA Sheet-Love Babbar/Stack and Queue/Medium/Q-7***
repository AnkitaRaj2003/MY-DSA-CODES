//GFG: Count the Reversals
//https://practice.geeksforgeeks.org/problems/count-the-reversals0401/1?page=1&difficulty[]=1&category[]=Stack&category[]=Queue&curated[]=1&curated[]=8&curated[]=7&sortBy=submissions

int countRev (string s)
{
    if(s.size()%2!=0) return -1;
    stack<char> st1;
    stack<char> st2;
    int count = 0;
    for(int i=0;s[i]!='\0';i++){
        if(s[i]=='{'){
            st1.push(s[i]);
        }
        else{
            if(st1.empty()){
                if(st2.empty()) st2.push(s[i]);
                else{
                    st2.pop();
                    count+=1;
                }
            }
            else st1.pop();
        }
    }
    while(!st1.empty() && !st2.empty()){
        st1.pop();
        st2.pop();
        count+=2;
    }
    if(!st1.empty()) count+=(st1.size()/2);
    if(!st2.empty()) count+=(st2.size()/2);
    return count;
}

-------------OR------------
//Mereko Samaj Nahi aaya return wali line
f(s.size()%2!=0) return -1;
    int open = 0;
    int close = 0;
    int count = 0;
    for(int i=0;s[i]!='\0';i++){
        if(s[i]=='{') open++;
        else open--;
        if(open<0){
            open = 0;
            close++;
        }
    }
    
    return close+open/2;

--------------OR---------------
Explanation:
Variables: c is counter variable indicating the number of open brackets. res is number of reversals.
Intuition: Greedy. 
->Whenever we get open brackets, add them. 
->Whenever we get closing brackets and we have open ones available, just remove extra open brackets you have.
->When we don't have enough opening brackets ,(c=0) then reverse the closing bracket we encountered immediately.
In the end, u may have some open brackets indicated by ‘c’. Example: c=3, then we can think of resultant as {{{ , 
we can notice that no reversal can fix this, so return -1 when c is odd. When c is even, example c=4, {{{{ => {{}} 
it can be changed this way by reversing half of the open brackets. so add c/2 to the result.
//close ko open kr dege when open==0
    int countRev (string s)
{
    if(s.size()%2!=0) return -1;
    int c=0;
    int res=0;
    
    for(auto ss:s)
    {
        if(ss=='{')
        {
            c++;
        }
        else
        {
            if(c==0)
            {
                res++;
                c++;
            }
            else
            {
                c--;
            }
        }
    }
    if(c%2) return -1;
    res+=c/2;
    return res;
    
}
