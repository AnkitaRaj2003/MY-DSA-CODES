//GFG: The Celebrity Problem
//https://practice.geeksforgeeks.org/problems/the-celebrity-problem/1?page=1&difficulty[]=1&category[]=Stack&category[]=Queue&curated[]=1&curated[]=8&curated[]=7&sortBy=submissions

//Simple iterative solution - O(N2)
//Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        //Check Row wise - all elements are 0(celebrity knows no one), and Column wise all elements are 1(all knows the celebrity) except when i = j.
        for(int i=0;i<n;i++){
            int flag = 0;
            for(int j=0;j<n;j++){
                if(i==j) continue;
                if(M[j][i]==0){
                    flag = 1;
                    break;
                }
            }
            if(flag!=1){
                flag = 2;
                for(int j=0;j<n;j++){
                    if(i==j) continue;
                    if(M[i][j]==1){
                        flag = 0;
                        break;
                    }
                }
            }
            if(flag == 2) return i;
        }
        return -1;
    }
    
//Another approach
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here
        for(int i=0;i<n;i++){
            if(M[0][i]==1){
                int flag = 0;
                for(int j=0;j<n;j++){
                    if(i!=j && M[j][i]==0){
                        flag = 1;
                        break;
                    } 
                }
                if(flag == 0){
                    for(int j=0;j<n;j++) if(M[i][j]==1) return -1;
                    return i;
                }
            }
        }
        for(int i=1;i<n;i++) if(M[i][0]==0) return -1;
        return 0;
    }

//Using Stack
//Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        stack<int> st;
        for(int i=0;i<n;i++) st.push(i);
        while(st.size()!=1){
            int a = st.top();
            st.pop();
            int b = st.top();
            st.pop();
            if(M[a][b] == 1) st.push(b);
            else st.push(a);
        }
        if(st.empty()) return -1;
        int i=st.top();
        st.pop();
        int flag = 0;
        for(int j=0;j<n;j++){
            if(i==j) continue;
            else if(M[i][j]==1 || M[j][i]==0){
                flag = 1;
                break;
            }
        }
        if(flag == 0) return i;
        return -1;
    }

//O(N) TC Approach:-
int start=0,end=n-1;
        while(start < end){
            if(M[start][end]==1) start++;
            else end--;
        }
        for(int i=0;i<n;i++){
            if(i!=start){
                 if(M[i][start]==0 || M[start][i]==1) return -1;
            }
        }
        return start;
        
//Using unordered maps
unordered_map<int,int> m;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++)
                if(M[i][j]==1) m[j]++;
        }
        int y=-1,flag=0;
        for(auto x:m){
            if(x.second == n-1){
                flag = 1;
                y = x.first;
                break;
            }
        }
        if(flag == 1){
            for(int i=0;i<n;i++){
                if(M[i][y]==0){
                    y = i;
                    break;
                }
            }
            for(int i=0;i<n;i++) if(M[y][i]==1) return -1;
        }
        return y;
