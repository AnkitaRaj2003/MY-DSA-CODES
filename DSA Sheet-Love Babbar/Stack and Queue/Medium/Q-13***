//GFG: Maximum of all subarrays of size k
//https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1?page=1&difficulty[]=1&category[]=Stack&category[]=Queue&curated[]=1&curated[]=8&curated[]=7&sortBy=submissions

//Function to find maximum of each subarray of size k.
    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        // your code here
        vector<int> v;
        int max = -1;
        int x = 0;
        for(int i=0;i<=n-k;i++){
            if(max==-1 || max == x){
                max = arr[i];
                int j=i+1;
                for(int a=0;a<k-1;a++,j++) if(arr[j]>max) max = arr[j];
            }
            else{
                if(arr[i+k-1]>max) max = arr[i+k-1];
            }
            v.push_back(max);
            x = arr[i];
        }
        return v;
    }


-----------OR------------
//Using deque
//Function to find maximum of each subarray of size k.
    vector <int> max_of_subarrays(int *arr, int n, int k)
    {
        // your code here
        deque<int> q;
        vector<int> v;
        int x = -1;
        for(int i=0;i<=n-k;i++){
            if(x==-1){
                for(int j=i;j<i+k;j++){
                    if(q.empty()) q.push_front(arr[j]);
                    else{
                        if(arr[j]<q.back()) q.push_back(arr[j]);
                        else{
                            while(!q.empty() && arr[j]>q.back()) q.pop_back();
                            q.push_back(arr[j]);
                        }
                    }
                }
                x = 0;
            }
            else{
                if(q.front()==arr[i-1]) q.pop_front();
                if(q.empty()) q.push_back(arr[i+k-1]);
                else{
                        if(arr[i+k-1]<q.back()) q.push_back(arr[i+k-1]);
                        else{
                            while(!q.empty() && arr[i+k-1]>q.back()) q.pop_back();
                            q.push_back(arr[i+k-1]);
                        }
                }
            }
            v.push_back(q.front());
        }
        return v;
    }
