#include<iostream>
#include<stack>
using namespace std;
class treeNode{
public:
    int data;
    treeNode* lchild, *rchild;
    treeNode(int data){
        this->data = data;
        lchild = NULL;
        rchild = NULL;
    }
};
template<class T>
class queue{
    int size,front,rear;
    T* Q;
public:
    queue(){
        this-size = 10;
        front = 10;
        rear = 10;
        Q = new T[size];
    }
    queue(int size){
        this->size = size;
        front = 0;
        rear = 0;
        Q = new T[size];
    } 
    void enqueue(T data);
    T dequeue();
    void display();
    bool isEmpty();
    bool isFull();
};
//Display for Queue
template<class T>
void queue<T>::display(){
    if(isEmpty()) cout<<"Queue is Empty";
    else{
        for(int i=front+1;i<=rear;i++) cout<<Q[i]<<" ";
        cout<<endl;
    }
}
//Full condition for Queue
template<class T>
bool queue<T>::isFull(){
    return ((rear+1)%size)==front;
}
//Empty Condition for Queue
template<class T>
bool queue<T>::isEmpty(){
    return rear==front;
}
//Enqueue Operation for Queue
template<class T>
void queue<T>::enqueue(T data){
    if(isFull()) cout<<"Queue OverFlow";
    else{
        rear = (rear+1)%size;
        Q[rear] = data; 
    }
}
//Dequeue operation for Queue
template<class T>
T queue<T>::dequeue(){
    T x = NULL;
    if(isEmpty()) cout<<"Queue UnderFlow";
    else{
        front = (front+1)%size;
        x = Q[front];
    }
    return x;
}

//Tree Code
class tree{
    treeNode* root;
public:
    //Preorder - Recursive code
    void preorder(treeNode* p);
    void preorder(){preorder(root);}
    //Inorder - Recursive code
    void inorder(treeNode* p);
    void inorder(){inorder(root);}
    //Postorder - Recursive code
    void postorder(treeNode* p);
    void postorder(){postorder(root);}
    //Create tree
    void createTree();
    //Display tree
    void display();
    //Iterative preorder
    void iterative_preorder(){iterative_preorder(root);};
    void iterative_preorder(treeNode* t);
    //Iterative inorder
    void iterative_inorder(){iterative_inorder(root);}
    void iterative_inorder(treeNode* t);
    //Iterative postorder
    void iterative_postorder(){iterative_postorder(root);}
    void iterative_postorder(treeNode* t);
    //Iterative levelorder
    void iterative_levelorder(){iterative_levelorder(root);};
    void iterative_levelorder(treeNode* t);
    //Count number of nodes - Iterative code 
    int count_node_iterative(treeNode* p);
    int count_node_iterative(){return count_node_iterative(root);} 
    //Count number of nodes - recursive code 
    int count_node_recursive(treeNode* p);
    int count_node_recursive(){return count_node_recursive(root);};
    //Count number of nodes with degree 2 - Recursive code 
    int count_node_degree2_recursive(treeNode*p);
    int count_node_degree2_recursive(){return count_node_degree2_recursive(root);};
    //Count number of nodes with degree 2 - Iterative code 
    int count_node_degree2_iterative(treeNode*p);
    int count_node_degree2_iterative(){return count_node_degree2_iterative(root);};
    //Counting leaf nodes - Recursive code
    int count_leaf_node_recursive(treeNode* p);
    int count_leaf_node_recursive(){return count_leaf_node_recursive(root);};
    //Counting leaf nodes - Iterative code
    int count_leaf_node_iterative(treeNode* p);
    int count_leaf_node_iterative(){return count_leaf_node_iterative(root);};
    //Sum of all nodes - Recursive code
    int sum_all_nodes_recursive(treeNode* p);
    int sum_all_nodes_recursive(){return sum_all_nodes_recursive(root);};
    //Sum of all nodes - Iterative code
    int sum_all_nodes_iterative(treeNode* p);
    int sum_all_nodes_iterative(){return sum_all_nodes_recursive(root);};
    //Height of tree - Recursive code
    int height_recursive(treeNode* p);
    int height_recursive(){return height_recursive(root);}
    //
};
//Iterative Postorder

//Count leaf node iterative
int tree::count_leaf_node_iterative(treeNode* p){
    int x = 0;
    stack<treeNode*> st;
    while(p || !st.empty()){
        if(p){
            st.push(p);
            p = p->lchild;
        }
        else{
            p = st.top();
            st.pop();
            if(!p->lchild && !p->rchild) x++;
            p = p->rchild;
        }
    }
    return x;
}
//Count Leaf node Recursive
int tree::count_leaf_node_recursive(treeNode* p){
    int x = 0,y = 0;
    if(p){
        x = count_leaf_node_recursive(p->lchild); 
        y = count_leaf_node_recursive(p->rchild);
        if(!p->lchild && !p->rchild) return x+y+1;
        return x+y; 
    }
    return 0;
}
//Height of a tree recursive
int tree::height_recursive(treeNode* p){
    int x=0,y=0;
    if(p){
        x = height_recursive(p->lchild);
        y = height_recursive(p->rchild);
        if(x>y) return x+1;
        return y+1;
    }
    return 0;
}
//Sum of all nodes iterative
int tree::sum_all_nodes_iterative(treeNode* p){
    int x = 0;
    stack<treeNode*> st;
    while(p || !st.empty()){
        if(p){
            st.push(p);
            x+=p->data;
            p = p->lchild;
        }
        else{
            p = st.top();
            st.pop();
            p = p->rchild;
        }
    }
    return x;
}
//Sum of all nodes recursive
int tree::sum_all_nodes_recursive(treeNode* p){
    int x = 0, y = 0;
    if(p){
        x = sum_all_nodes_recursive(p->lchild);
        y = sum_all_nodes_recursive(p->rchild);
        return x+y+p->data;
    }
    return 0;
}
//Count node of Degree 2 Iterative
int tree::count_node_degree2_iterative(treeNode* p){
    int x = 0;
    stack<treeNode*> st;
    while(p || !st.empty()){
        if(p){
            st.push(p);
            if(p->lchild && p->rchild) x++;
            p = p->lchild;
        }
        else{
            p = st.top();
            st.pop();
            p = p->rchild;
        }
    }
    return x;
}
//Count node of Degree 2 Recursive
int tree::count_node_degree2_recursive(treeNode* p){
    int x=0,y=0;
    if(p){
        x = count_node_degree2_recursive(p->lchild);
        y = count_node_degree2_recursive(p->rchild);
        if(p->lchild && p->rchild) return x+y+1;
        else return x+y;
    }
    return 0;
}
//Recursive count node
int tree::count_node_recursive(treeNode*p){
    int x = 0,y = 0;
    while(p){
        x = count_node_recursive(p->lchild);
        y = count_node_recursive(p->rchild);
        return x+y+1;
    }
    return 0;
}
//Iterative count node
int tree::count_node_iterative(treeNode* p){
    int x = 0;
    stack<treeNode*> st;
    while(p || !st.empty()){
        if(p){
            st.push(p);
            p = p->lchild;
        }
        else{
            p = st.top();
            st.pop();
            x++;
            p = p->rchild;
        }
    }
    return x;
}
//Iterative LevelOrder
void tree::iterative_levelorder(treeNode* t){
    queue<treeNode*> q(100);
    //treeNode* p;
    if(!t) cout<<"Tree is Empty"<<endl;
    else q.enqueue(t);
    while(!q.isEmpty()){
        t = q.dequeue();
        cout<<t->data<<" ";
        if(t->lchild) q.enqueue(t->lchild);
        if(t->rchild) q.enqueue(t->rchild);
    }
}

//Iterative Inorder
void tree::iterative_inorder(treeNode* t){
    stack<treeNode*> st;
    while(t || !st.empty()){
        if(t){
            st.push(t);
            t = t->lchild;
        }
        else{
            t = st.top();
            st.pop();
            cout<<t->data<<" ";
            t = t->rchild;
        }
    }
}
//Iterative Preorder
void tree::iterative_preorder(treeNode* t){
    stack<treeNode*> st;
    cout<<"Iterative Preorder: ";
    while(t || !st.empty()){
        if(t){
            cout<<t->data<<" ";
            st.push(t);
            t = t->lchild;
        }
        else{
            t = st.top();
            st.pop();
            t = t->rchild;
        }
    }
    cout<<endl;
}
//Preorder Tree Traversal
void tree::preorder(treeNode* p){
    if(p){
        cout<<p->data<<" ";
        preorder(p->lchild);
        preorder(p->rchild);
    }
}
//Inorder Tree Traversal
void tree::inorder(treeNode* p){
    if(p){
        inorder(p->lchild);
        cout<<p->data<<" ";
        inorder(p->rchild);
    }
}
//Postorder Tree Traversal
void tree::postorder(treeNode* p){
    if(p){
        postorder(p->lchild);
        postorder(p->rchild);
        cout<<p->data<<" ";
    }
}
void tree::createTree(){
    treeNode* p,* t;
    queue<treeNode*> q(100);
    int data;
    cout<<"Enter Root child: ";
    cin>>data;
    if(data!=-1){
        t = new treeNode(data);
        root = t;
        q.enqueue(t);
    }
    else root = NULL;
    while(!q.isEmpty()){
        p = q.dequeue();
        cout<<"Enter left child of "<< p->data << " :";
        cin>>data;
        if(data!=-1){
            p->lchild = new treeNode(data);
            q.enqueue(p->lchild);
        }
        else p->lchild = NULL;
        cout<<"Enter right child of "<< p->data << " :";
        cin>>data;
        if(data!=-1){
            p->rchild = new treeNode(data);
            q.enqueue(p->rchild);
        }
        else p->rchild = NULL;
    }
}
void tree::display(){
    treeNode* p;
    queue<treeNode*> q(100);
    if(root) q.enqueue(root);
    while(!q.isEmpty()){
        p = q.dequeue();
        cout<<"Node "<<p->data<<": "<<endl;
        if(p->lchild){
            cout<<"Left Child is "<<p->lchild->data<<endl;
            q.enqueue(p->lchild);
        }
        else cout<<"No left child"<<endl;
        if(p->rchild){
            cout<<"Right Child is "<<p->rchild->data<<endl;
            q.enqueue(p->rchild);
        }
        else cout<<"No right child"<<endl;
        cout<<endl;
    }
}
//Main Function
int main()
{
    tree t;
    t.createTree();
    cout<<"Recursive: "<<t.count_leaf_node_recursive()<<endl;
    cout<<"Iterative: "<<t.count_leaf_node_iterative();
    return 0;
}
